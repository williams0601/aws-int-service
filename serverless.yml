service: aws-lambda
frameworkVersion: '3'

custom:
  stages:
    - dev
    - stage
    - prod
  baseTableName: 'RoutesLinked'
  tableName: ${self:service}-${self:custom.baseTableName}-${opt:stage}

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage}
  profile: dev-profile
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - Fn::GetAtt: [ TaskTable, Arn ]

functions:
  hello:
    handler: src/handler.hello
    events:
      - httpApi:
          path: /
          method: get
  createTask:
    handler: src/addTask.addTask
    events:
      - httpApi:
          path: /tasks
          method: post
  getTasks:
    handler: src/getTasks.getTasks
    events:
      - httpApi:
          path: /tasks
          method: get
  getTask:
    handler: src/getTask.getTask
    events:
      - httpApi:
          path: /tasks/{id}
          method: get
  updateTask:
    handler: src/updateTask.updateTask
    events:
      - httpApi:
          path: /tasks/{id}
          method: put
  deleteTask:
    handler: src/deleteTask.deleteTask
    events:
      - httpApi:
          path: /tasks/{id}
          method: delete


resources:
  Resources:
    TaskTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

plugins:
  - serverless-stage-manager